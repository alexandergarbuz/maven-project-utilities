<?xml version="1.0"?>
<ruleset name="Default PMD Ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 
                             https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Default PMD ruleset configuration that includes the most important
        and commonly used rules for Java code analysis.
    </description>

    <!-- Best Practices Rules -->
    <rule ref="category/java/bestpractices.xml">
        <!-- Exclude rules that might be too strict for some projects -->
        <exclude name="JUnitTestsShouldIncludeAssert"/>
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
        <exclude name="GuardLogStatement"/>
    </rule>

    <!-- Code Style Rules -->
    <rule ref="category/java/codestyle.xml">
        <!-- Exclude overly strict naming and formatting rules -->
        <exclude name="OnlyOneReturn"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="CallSuperInConstructor"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="DefaultPackage"/>
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
        <exclude name="ShortClassName"/>
        <exclude name="ShortMethodName"/>
        <exclude name="TooManyStaticImports"/>
        <exclude name="UnnecessaryLocalBeforeReturn"/>
        <exclude name="UselessParentheses"/>
        <exclude name="UseUnderscoresInNumericLiterals"/>
    </rule>

    <!-- Design Rules -->
    <rule ref="category/java/design.xml">
        <!-- Exclude rules that might be too restrictive -->
        <exclude name="LawOfDemeter"/>
        <exclude name="LoosePackageCoupling"/>
        <exclude name="UseUtilityClass"/>
    </rule>

    <!-- Documentation Rules -->
    <rule ref="category/java/documentation.xml">
        <!-- Exclude overly strict documentation requirements -->
        <exclude name="CommentRequired"/>
        <exclude name="CommentSize"/>
    </rule>

    <!-- Error Prone Rules -->
    <rule ref="category/java/errorprone.xml">
        <!-- Exclude rules that might cause false positives -->
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="DataflowAnomalyAnalysis"/>
        <exclude name="NullAssignment"/>
    </rule>

    <!-- Multithreading Rules -->
    <rule ref="category/java/multithreading.xml">
        <!-- All multithreading rules are generally important -->
    </rule>

    <!-- Performance Rules -->
    <rule ref="category/java/performance.xml">
        <!-- Exclude rules that might be overly aggressive -->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <exclude name="RedundantFieldInitializer"/>
    </rule>

    <!-- Security Rules -->
    <rule ref="category/java/security.xml">
        <!-- All security rules are important -->
    </rule>

    <!-- Custom rule configurations with modified properties -->
    
    <!-- Modify CyclomaticComplexity threshold -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="cycloOptions" value=""/>
            <property name="reportLevel" value="10"/>
        </properties>
    </rule>

    <!-- Modify NPathComplexity threshold -->
    <rule ref="category/java/design.xml/NPathComplexity">
        <properties>
            <property name="reportLevel" value="200"/>
        </properties>
    </rule>

    <!-- Modify ExcessiveMethodLength threshold -->
    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="100"/>
        </properties>
    </rule>

    <!-- Modify ExcessiveClassLength threshold -->
    <rule ref="category/java/design.xml/ExcessiveClassLength">
        <properties>
            <property name="minimum" value="1000"/>
        </properties>
    </rule>

    <!-- Modify TooManyMethods threshold -->
    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="25"/>
        </properties>
    </rule>

    <!-- Modify TooManyFields threshold -->
    <rule ref="category/java/design.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="20"/>
        </properties>
    </rule>

    <!-- Modify ExcessiveParameterList threshold -->
    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="8"/>
        </properties>
    </rule>

    <!-- Note: PMD doesn't have a built-in line length rule like Checkstyle
         Line length should be handled by code formatters or other tools -->

    <!-- Configure class naming conventions -->
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="classPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="enumPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="annotationPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <!-- Configure method naming conventions -->
    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <properties>
            <property name="methodPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="nativePattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="junit3TestPattern" value="test[A-Z0-9][a-zA-Z0-9]*"/>
            <property name="junit4TestPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="junit5TestPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <!-- Configure field naming conventions -->
    <rule ref="category/java/codestyle.xml/FieldNamingConventions">
        <properties>
            <property name="publicConstantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="constantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="enumConstantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="finalFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="defaultFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="exclusions" value="serialVersionUID|logger"/>
        </properties>
    </rule>

    <!-- Configure local variable naming -->
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
        <properties>
            <property name="localVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="catchParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <!-- Configure formal parameter naming -->
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
        <properties>
            <property name="methodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalMethodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

</ruleset>