name: Integration Tests with Selenium
on:
  push:
    branches: [ main, add-selenium-tests ]
  pull_request:
    branches: [ main, add-selenium-tests ]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx1024m'
  APP_HOST: 'localhost'
  APP_PORT: '8080'
  APP_URL: 'http://localhost:8080'
  HEALTH_CHECK_URL: 'http://localhost:8080/actuator/health'
  SPRING_PROFILES: 'test'
  DISPLAY: ':99'
  CHROMEDRIVER_PATH: '/usr/local/bin/chromedriver'
  # Timeout settings to prevent hanging jobs
  APP_STARTUP_TIMEOUT: '300'  # seconds to wait for Spring Boot startup
  INTEGRATION_TEST_TIMEOUT: '1800'  # 30 minutes max for integration tests

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      chrome-version: ${{ steps.chrome-info.outputs.version }}
      chromedriver-version: ${{ steps.chrome-info.outputs.driver-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Chrome and ChromeDriver
      id: chrome-setup
      run: |
        # Install Chrome browser
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable jq
        
        # Get Chrome version
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1-3)
        echo "Chrome version: $CHROME_VERSION"
        
        # Download ChromeDriver using Chrome for Testing API
        CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | \
          jq -r ".versions[] | select(.version | startswith(\"$CHROME_VERSION\")) | .downloads.chromedriver[] | select(.platform==\"linux64\") | .url" | head -1)
        
        if [ -z "$CHROMEDRIVER_URL" ]; then
          echo "Could not find ChromeDriver for version $CHROME_VERSION"
          # Fallback: use latest stable version
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | \
            jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')
        fi
        
        echo "Downloading ChromeDriver from: $CHROMEDRIVER_URL"
        wget -N "$CHROMEDRIVER_URL" -O chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver ${{ env.CHROMEDRIVER_PATH }}
        sudo chmod +x ${{ env.CHROMEDRIVER_PATH }}
        
        # Save information for next jobs
        echo "CHROME_VERSION=$CHROME_VERSION" >> $GITHUB_ENV
        echo "CHROMEDRIVER_URL=$CHROMEDRIVER_URL" >> $GITHUB_ENV
    
    - name: Setup Virtual Display
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=${{ env.DISPLAY }}
        Xvfb ${{ env.DISPLAY }} -screen 0 1024x768x24 > /dev/null 2>&1 &
        
    - name: Output Chrome info
      id: chrome-info
      run: |
        CHROME_FULL_VERSION=$(google-chrome --version)
        CHROMEDRIVER_FULL_VERSION=$(chromedriver --version)
        echo "Chrome: $CHROME_FULL_VERSION"
        echo "ChromeDriver: $CHROMEDRIVER_FULL_VERSION"
        echo "version=$CHROME_VERSION" >> $GITHUB_OUTPUT
        echo "driver-version=$CHROMEDRIVER_FULL_VERSION" >> $GITHUB_OUTPUT
        
    - name: Cache Chrome installation
      uses: actions/cache@v3
      with:
        path: |
          /usr/bin/google-chrome-stable
          ${{ env.CHROMEDRIVER_PATH }}
        key: chrome-${{ runner.os }}-${{ steps.chrome-info.outputs.version }}

  build-and-compile:
    name: Build and Compile
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile project
      run: |
        echo "Compiling project with Maven..."
        cd ./multi-module-build
        mvn clean compile -DskipTests
        echo "Compilation completed successfully"
        
    - name: Cache compiled artifacts
      uses: actions/cache@v3
      with:
        path: |
          target/
          **/target/classes/
        key: build-${{ runner.os }}-${{ github.sha }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup-environment, build-and-compile]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Restore Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Restore compiled artifacts
      uses: actions/cache@v3
      with:
        path: |
          target/
          **/target/classes/
        key: build-${{ runner.os }}-${{ github.sha }}
        
    - name: Run Unit Tests
      run: |
        echo "Running unit tests..."
        cd ./multi-module-build
        mvn clean install surefire:test
        echo "Unit tests completed"
        
    - name: Upload unit test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: |
          **/target/surefire-reports/**
          
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Unit Tests Results
        path: '**/target/surefire-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-environment, build-and-compile]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Restore Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Restore compiled artifacts
      uses: actions/cache@v3
      with:
        path: |
          target/
          **/target/classes/
        key: build-${{ runner.os }}-${{ github.sha }}
        
    - name: Restore Chrome installation
      uses: actions/cache@v3
      with:
        path: |
          /usr/bin/google-chrome-stable
          ${{ env.CHROMEDRIVER_PATH }}
        key: chrome-${{ runner.os }}-${{ needs.setup-environment.outputs.chrome-version }}
        
    - name: Setup Virtual Display for Integration Tests
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=${{ env.DISPLAY }}
        Xvfb ${{ env.DISPLAY }} -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "Virtual display started on ${{ env.DISPLAY }}"
        
    - name: Verify Chrome and ChromeDriver
      run: |
        echo "Verifying Chrome and ChromeDriver installation..."
        google-chrome --version || echo "Chrome not found"
        chromedriver --version || echo "ChromeDriver not found"
        ls -la ${{ env.CHROMEDRIVER_PATH }}
        
    - name: Start Spring Boot Application
      run: |
        echo "Starting Spring Boot application..."
        echo "Profile: ${{ env.SPRING_PROFILES }}"
        echo "Expected URL: ${{ env.APP_URL }}"
        
        # Start Spring Boot application in background
        cd ./multi-module-build-web
        mvn spring-boot:start -Dspring-boot.run.profiles=${{ env.SPRING_PROFILES }}
        
        # Wait for application to become ready
        echo "Waiting for Spring Boot to start on ${{ env.HEALTH_CHECK_URL }}..."
        timeout ${{ env.APP_STARTUP_TIMEOUT }} bash -c 'until curl -s ${{ env.HEALTH_CHECK_URL }} | grep "\"status\":\"UP\"" > /dev/null 2>&1; do 
          echo "Spring Boot not ready yet, waiting..."
          sleep 5; 
        done'
        
        if [ $? -ne 0 ]; then
          echo "Spring Boot application failed to start within timeout"
          curl -s ${{ env.HEALTH_CHECK_URL }} || echo "Health check endpoint not accessible"
          exit 1
        fi
        echo "Spring Boot application started successfully with status UP"
        
    - name: Run Integration Tests
      env:
        DISPLAY: ${{ env.DISPLAY }}
      timeout-minutes: 30  # Prevent integration tests from running indefinitely
      run: |
        echo "Running integration tests..."
        echo "App URL: ${{ env.APP_URL }}"
        echo "ChromeDriver path: ${{ env.CHROMEDRIVER_PATH }}"
        echo "Display: ${{ env.DISPLAY }}"
        echo "Timeout: ${{ env.INTEGRATION_TEST_TIMEOUT }} seconds"
        
        # Execute integration tests with timeout
        timeout ${{ env.INTEGRATION_TEST_TIMEOUT }} mvn failsafe:integration-test failsafe:verify \
          -P run-integration-tests \
          -Dtest.browser=chrome \
          -Dheadless=true \
          -Dwebdriver.chrome.driver=${{ env.CHROMEDRIVER_PATH }} \
          -Dapp.url=${{ env.APP_URL }} \
          -Dapp.host=${{ env.APP_HOST }} \
          -Dapp.port=${{ env.APP_PORT }}
          
    - name: Stop Spring Boot Application
      if: always()
      run: |
        echo "Stopping Spring Boot application..."
        mvn spring-boot:stop || true
        
        # Additional process cleanup
        pkill -f "spring-boot" || true
        
    - name: Collect logs and reports
      if: always()
      run: |
        echo "=== Application Logs ==="
        find . -name "*.log" -path "*/target/*" -exec echo "=== {} ===" \; -exec cat {} \;
        
        echo "=== Surefire reports ==="
        find . -name "*.log" -path "*/target/surefire-reports/*" -exec cat {} \;
        
        echo "=== Failsafe reports ==="
        find . -name "*.log" -path "*/target/failsafe-reports/*" -exec cat {} \;
        
        echo "=== System Info ==="
        echo "Chrome version: $(google-chrome --version 2>/dev/null || echo 'Not available')"
        echo "ChromeDriver version: $(chromedriver --version 2>/dev/null || echo 'Not available')"
        echo "Java version: $(java -version 2>&1)"
        echo "Maven version: $(mvn -version)"
        
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          **/target/failsafe-reports/**
          **/target/site/jacoco/**
          **/target/*.log
          
    - name: Publish Integration Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Integration Tests Results
        path: '**/target/failsafe-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: true